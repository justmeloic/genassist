import asyncio
import os
import uuid

import aiofiles
import aiohttp
from google import genai
from google.genai import types
from loguru import logger

from src.app.core.config import settings


class VideoGenerationError(Exception):
    """Custom exception for video generation failures."""


class Text2VideoService:
    """
    Service for generating videos from text prompts using the Gemini AI API.

    This service handles the asynchronous process of initiating video generation,
    polling for completion, and downloading the final video file.
    """

    def __init__(self):
        """Initializes the Text2VideoService."""
        self.client = genai.Client()
        self.output_dir = settings.VIDEO_OUTPUT_DIR
        os.makedirs(self.output_dir, exist_ok=True)

    async def generate_video(
        self, prompt: str, aspect_ratio: str, person_generation: str
    ) -> str:
        """
        Generates a video asynchronously based on a text prompt.

        Args:
            prompt: The text description for the video.
            aspect_ratio: The desired aspect ratio (e.g., "16:9").
            person_generation: The policy for generating people.

        Returns:
            The filename of the generated video.

        Raises:
            VideoGenerationError: If the video generation or download fails.
        """
        try:
            logger.info("Starting video generation for prompt: %s", prompt)
            operation = await self.client.aio.models.generate_videos(
                model=settings.GEMINI_MODEL_VIDEO,
                prompt=prompt,
                config=types.GenerateVideosConfig(
                    person_generation=person_generation,
                    aspect_ratio=aspect_ratio,
                ),
            )

            logger.info("Polling for video generation completion...")
            while not operation.done:
                await asyncio.sleep(20)  # Non-blocking sleep
                operation = await self.client.aio.operations.get(operation)

            if not operation.response or not operation.response.generated_videos:
                logger.error("Video generation failed: No video was returned.")
                raise VideoGenerationError("No video generated by the API.")

            video_file = operation.response.generated_videos[0].video
            if not video_file or not video_file.uri:
                logger.error("Video generation failed: No download URI found.")
                raise VideoGenerationError(
                    "No video download URI found in the response."
                )

            logger.info("Downloading video from URI: %s", video_file.uri)
            async with aiohttp.ClientSession() as session:
                async with session.get(video_file.uri) as resp:
                    resp.raise_for_status()
                    video_data = await resp.read()

            file_name = f"video_{uuid.uuid4()}.mp4"
            file_path = os.path.join(self.output_dir, file_name)

            async with aiofiles.open(file_path, "wb") as f:
                await f.write(video_data)

            logger.info("Successfully generated and saved video: %s", file_name)
            return file_name

        except Exception as e:
            logger.error("An unexpected error occurred during video generation: %s", e)
            raise VideoGenerationError(f"An unexpected error occurred: {e}") from e
